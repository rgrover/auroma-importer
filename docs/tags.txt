Description of the Language to be used for Tagging
==================================================
Rohit Grover <rgrover1@gmail.com>
v0.1, February 2011:
Draft version.

This document describes how to tag the scanned texts in order to
capture useful semantic information from the source. The objective is
to bring the scanned material closer to the original texts, but also
to avoid making the tagging process overly complex. The tagged files
will subsequently be input to the automated importer to generate XML
(and other formats as needed).

Input Files
-----------

Each tagged text to be sent to the importer will be a plain ASCII text
file containing an entire work. You can create it with any editor. It
will contain the text of the document as well as have tags added to
highlight special semantic properties.

Spaces
~~~~~~

"Whitespace" characters such as blank or tab are treated uniformly as
"space." Several consecutive white space characters are treated as one
"space." A single linebreak is treated as a "whitespace."

Any empty line between two lines of text defines the end of a
paragraph. Several empty lines are treated the same as one empty
line. A new paragraph can also be begun with a +\par+ tag--this is the
recommended approach.

Special Characters
~~~~~~~~~~~~~~~~~~

The following symbols are reserved characters that have special
meaning:

_______________________
\ { }
_______________________

As you will see, these characters can be used in your documents all
the same by adding a prefix backslash:


----------------------
\\ \{ \}
----------------------

Unusual symbols can described either by using diacritical marks (for
accents) or using Unicode Character-points directly (such as \Uxxxx,
where +xxxx+ is the UTF-16 representation of a character).

Tags
~~~~

Tags and commands are case sensitive. They usually start with a
backslash \ and then have a name consisiting of letters only. Command
names are terminated by a space, a number, or any other punctuation
mark.

Some commands need a parameter which has to be given between curly
braces { } after the command name; for example:

.Examples of Using Tags--even ones which take arguments
===================================
Please, start a new line right here!\newline Thank you!

The above should place 'Thank you!' on a separate line\footnote{this
is a footnote appearing right after the word 'line'}.
===================================

In the above tagged text, we used the \newline command to force a new
line. We also used the \footnote tag, which takes an argument within
curly braces.

Input File Structure
~~~~~~~~~~~~~~~~~~~~

When the importer processes an input file, it expects the file to
follow a certain structure.

At the head of an input file, there can be an optional header
containing meta-data information in the form of the \title, \tagger,
and \date tags. The following is an example:


-----------------------------
\title{The Life Divine}
\tagger{Dr. Goodman}
\date{12th February, 2011}

...the tagged text 
...
Simple is {\it beaufitul}.
...
-----------------------------

Thereafter, the body of the tagged text follows.

Tagging Text
------------

Paragraphs
~~~~~~~~~~

The most important text unit in a tagged document is the paragraph. We
call it a "text unit" because a paragraph is the typographical form
which should reflect one coherent thought, or one idea. If a new
thought begins, a new paragraph should begin, and if not, only
linebreaks should be used.

Paragraphs should be tagged as beginning wihh a +\par+, or a
+\firstpar+ in the case where the paragraph is the first within its
parent container (such as the first paragraph of a chapter).

Although an empty line also marks the end of a paragraph, it is better
to be explicit about it through the use of +\par+ at the beginning of
a paragraph. If an empty line is used to separate paragraphs, a +\par+
is assumed by default, instead of a +\firstpar+.


Paragraph Containers
~~~~~~~~~~~~~~~~~~~~

Paragraphs of a text may either stand independently, or, as is
commonly the case, they may be structured logically into a higherarchy
of levels: chapters, book-parts, and so on.

We shall not assume or adopt any single hierarchy of these groupings
since such a choice cannot not be consistent across the many works we
wish to encode; but rather we will limit ourselves to a logical scheme
for these containers and permit the tagger to select the appropriate
categorization in each case--the table-of-contents for a work should
suggest this hierarchy quite simply in most cases.

In order to simplify the task of expressing the container hierarchy
without getting caught up in the details of levels and level-numbers,
only the following tags are made available to the tagger.

----------------------
\hn Heading Number
\ht Heading Title
\push
\pop
----------------------

Any text is assumed to begin with the current container level set to
the highest possible logical value--so for instance, we know that
"The Life Divine" begins with "Book One", and so the tagger can
assume that at the beginning of the text the current container level
is that of a "Book". The tagger need not specify this level of
detail--that the starting container is a Book,--the information
required to be extracted from the tagged text doesn't depend on this
kind of detail.

At any time, a new container can be introduced (at the current level)
by using either of the following naming tags: +\hn+ (which introduces
a container through a heading-number) or +\ht+ (which introduces a
heading-title). When used in conjunction, +\ht+ and +\ht+ describe the
same container heading.

So, for instance, the following is one way to introduce Book One in
the Life Divine:

-------------------------------------------------------------------------
\par
\hn BOOK ONE
\ht Omnipresent Reality \newline And \newlilne The Universe
--------------------------------------------------------------------------

Continuing with this example, we can descend from the level of a Book
into Chapters using the following tag:

-----------------------------------------------
\push
-----------------------------------------------

Thereafter, "Chapter I" within the book can be tagged as follows:

----------------------------------------
\par
\hn Chapter I
\ht The Human Aspiration
-------------------------------------------

If only one of a heading-number or heading-title is specified, that
still introduced a new container at the current level--usually, both
the number and the title are available.

When all the containers at the current level have been exhausted, it
is possible to jump back to the parent level using the following tag:

-----------------------------
\pop
-----------------------------

Using this simple scheme, it should be possible to define any kind of
hierarchy to an arbitrary level of depth.


Linebreaking and Pagebreaking
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Often books are typeset with each line having the same length. For our
purposes, however, since the content will most likely be displayed on
a web browser, we should not depend on assumptions about line
widths. Pagebreaks, however, are still important--we would like to
retain this information so that the users can easily switch between
electronic and hard-copy versions of a book.

The manner in which the paragraphs are eventually typeset on the
display depends on the current container level and the attributes of
the paragraph--and the tagger should mostly remain isolated from these
details.

Normally the first line of every paragraph is indented by default
(except the first paragraph within a container). If the indenting for
a paragraph is to be dropped, then a +\noindent+ should be used
immediately following the +\par+; similarly if indenting is required
it may be explicitly requested using a +\indent+.

In special cases, it might be necessary to order a linebreak--as is
often necessary when defining container headings. For these cases,
+\newline+ starts a new line without starting a new
paragraph. Similarly, +\newpage{pagenumber}+ starts a new page. With
+\newpage+, the pagenumber within the square brackets is an optional
argument. It can be left empty if there is no pagenumber to be
displayed; otherwise it should be specified.

Special Characters and Symbols
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Quotation Marks
^^^^^^^^^^^^^^^

You may use the " character for quotation marks as you would on a
typewriter, but there are better alternatives. In publishing there are
special opening and closing quotation marks. Use two `s (grave
accents) for opening quotation marks and two 's (apostrophe) for
closing quotation marks. For single quotes, you use just one of each.

Dashes and Hyphens
^^^^^^^^^^^^^^^^^^

You can use three kinds of dashes. You can use these with different
numbers of consecutive dashes. The names for these dashes are: '-'
hyphen, '--' en-dash, and '---' em-dash. An en-dash is used to obtain
a dash the same width as an 'n'. Likewise, an em-dash gives a dash as
wide as the letter 'm'. A hyphen is used to separate word-parts or to
specify number ranges.


Elipsis (...)
^^^^^^^^^^^^^^

On a typewriter, a comma or a period takes the same amount of space as
any other letter. In publishing, these characters occupy only a little
space and are set very close to the preceding letter. Therefore you
cannot enter `ellipsis' by just typing three dots, as the spacing
would be wrong. There is a special command for these dots, it is
called +\dots+.

Accents and Special Characters
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

We support the use of accents and special characters from many
languages. The following table shows all accents being applied to the
letter o. Naturally, other letters work too.

[width="15%"]
|===============================
|\=o | latexmath:[$\text{\={o}}$]
|\.o | latexmath:[$\text{\.{o}}$]
|\,o | latexmath:[$\text{\,{o}}$]
|\'o | latexmath:[$\text{\'{o}}$]
|\"o | latexmath:[$\text{\"{o}}$]
|\^o | latexmath:[$\text{\^{o}}$]
|\`o | latexmath:[$\text{\`{o}}$]
|\~o | latexmath:[$\text{\~{o}}$]
|\co | latexmath:[$\text{\c{o}}$]
|\do | latexmath:[$\text{\d{o}}$]
|===============================

If you need to use characters outside the Latin alphabet, you can
enter Unicode Codepoints directly. To do this, use a sequence such as
+\uxxxx+ where the +xxxx+ stands for the 4 digit hexadecimal
codepoint. So, for instance, the character latexmath:[$\text{\~{o}}$],
which is represented by the codepoint 0x00F5, can be written anywhere
in the document as \u00f5.

Quotation References
~~~~~~~~~~~~~~~~~~~~

We provide the command +\ref{text}+ for adding references to
quotations.

Footnotes
~~~~~~~~~

With the command +\footnote{footnote text}+ a footnote is printed at
the foot of the current page. Footnotes should always be put after the
word or sentence they refer to. Footnotes referring to a sentence or a
part of it sould therefore be put after the comma or period.

Emphasized Words
~~~~~~~~~~~~~~~~

Words or ranges of words may be emphasized by typesetting them in an
italic font. We provide the command +\emph{text}+ to emphasize
text. In addition to this command, we also provide the +\it+ tag which
sets-up italics for the text which follows in the current paragraph or
the current block (within the surrounding \{ and \}).


Bold Face
~~~~~~~~~

Similar to emphasizing text with italics, we provide +\bf{text}+ for bold face
text.

Alignment
~~~~~~~~~

The tags +\flushleft+ and +\flushright+ generate paragraphs which are
either left- or right-aligned. The +\center+ tag generated centered
text. These tgs apply to the current paragraph.

Itemize and Enumerate
~~~~~~~~~~~~~~~~~~~~~

The +\itemize+ tag is suitable for simple lists (using bullets). It
applies to the current paragraph.

+\enumerate{number}+ generates lists with numbers as supplied by the tagger.


Quotation, Verse, and Prose
~~~~~~~~~~~~~~~~~~~~~~~~~~~

The +\quote+ tag is useful for quoted paragraphs, important phrases,
and examples. The +\verse+ tag is useful for poems where the line
breaks are important

Printing Verbatim
~~~~~~~~~~~~~~~~~

Paragraphs containing the +\verbatim+ tag will have their text taken
literally, as if they were typed on a typewriter, with all the
linebreaks and spaces, without any other formatting. This tag can
prove to be a useful fallback for the cases where supported tags are
unable to describe text as it appears in the original work.
