// Generated by Bisonc++ V2.7.0 on Wed, 02 Feb 2011 18:33:03 +0530

#ifndef auromaParser_h_included
#define auromaParser_h_included

// $insert baseclass
#include "auromaParserbase.h"

#undef yyFlexLexer
#define yyFlexLexer auromaFlexLexer
#include <FlexLexer.h>


#undef auromaParser
class auromaParser: public auromaParserBase
{
        
    public:
        auromaParser(yyFlexLexer *lexerIn) :
            lexer(lexerIn)
        {
            /* empty */
        }
    
        int parse();

    private:
        yyFlexLexer *lexer;

        void error(char const *msg);    // called on (syntax) errors
        int lex();                      // returns the next token from the
                                        // lexical scanner. 
        void print();                   // use, e.g., d_token, d_loc

    // support functions for parse():
        void executeAction(int ruleNr);
        void errorRecovery();
        int lookup(bool recovery);
        void nextToken();
};

inline int auromaParser::lex()
{
    return lexer->yylex();
}


inline void auromaParser::error(char const *msg)
{
    std::cerr << msg << '\n';
}

// $insert lex

// $insert print
inline void auromaParser::print()
{}

#endif
